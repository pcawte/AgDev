;
; Title:		AGON MOS - MOS assembly interface
; Author:		Jeroen Venema updated by Paul Cawte for use with AgDev Toolchain
; Created:		15/10/2022
; Last Updated:	18/11/2023
; 
; Modinfo:
; 02/07/2023		Added getsysvar_time
; 23/06/2023	Adjusted for fasmg assmebler (Paul Cawte, 16/06/2023)
; 			corrected _getsysvar_rtc to use lea hl, ix+sysvar_rtc - shorter
;			eliminated ZDS eZ80 pseudo instructions not supported by fasmg in
;			- _mos_sysvars
;			- _mos_open
;			- _mos_fread and _mos_fwrite
; 
; 15/10/2022:		Added _putch, _getch
; 21/10/2022:		Added _puts
; 22/10/2022:		Added _waitvblank, _mos_f* file functions
; 26/11/2022:       	__putch, changed default routine entries to use IY
; 10/01/2023:		Added _getsysvar_cursorX/Y and _getsysvar_scrchar
; 23/02/2023:		Added _mos_save and _mos_del, also changed stackframe to use ix exclusively
; 16/04/2023:		Added _mos_fread, _mos_fwrite and _mos_flseek
; 18/04/2023:		_mos_flseek fix
; 19/04/2023:		_mos_getfil added
; 18/11/2023:		_mos_setkbvector, _mos_getkbmap, _mos_i2c_open, _mos_i2c_close, _mos_i2c_write, _mos_i2c_read added

	assume	adl =1

	include "mos_api.inc"

	section	.text
	
	public	_putch, __putch
	public	_getch
	public	_waitvblank
	public	_mos_puts
	public	_mos_load
	public	_mos_save
	public	_mos_cd
	public	_mos_dir
	public	_mos_del
	public	_mos_ren
	public	_mos_copy
	public	_mos_mkdir
	public	_mos_sysvars
	public	_mos_editline
	public	_mos_fopen
	public  _mos_fclose
	public  _mos_fgetc
	public  _mos_fputc
	public  _mos_feof
	public  _ffs_dopen
	public  _ffs_dread
	public  _ffs_dclose
	public  _mos_getError
	public  _mos_oscli
	public  _mos_getrtc
	public  _mos_setrtc
	public  _mos_setintvector
	public  _mos_uopen
	public  _mos_uclose
	public  _mos_ugetc
	public  _mos_uputc
	public  _mos_fread
	public  _mos_fwrite
	public  _mos_flseek
	public  _mos_getfil
	public  _mos_setkbvector
	public  _mos_getkbmap
	public  _mos_i2c_write
	public  _mos_i2c_read
	public  _mos_i2c_close
	public  _mos_i2c_open

	public	_getsysvar_time
	public  _getsysvar_vpd_pflags
	public  _getsysvar_keyascii
	public  _getsysvar_keymods
	public  _getsysvar_cursorX
	public  _getsysvar_cursorY
	public  _getsysvar_scrchar
	public  _getsysvar_scrpixel
	public  _getsysvar_audioChannel
	public  _getsysvar_audioSuccess
	public  _getsysvar_scrwidth
	public  _getsysvar_scrheight
	public  _getsysvar_scrCols
	public  _getsysvar_scrRows
	public  _getsysvar_scrColours
	public  _getsysvar_scrpixelIndex
	public  _getsysvar_vkeycode
	public  _getsysvar_vkeydown
	public  _getsysvar_vkeycount
	public  _getsysvar_rtc
	public  _getsysvar_keydelay
	public  _getsysvar_keyrate
	public  _getsysvar_keyled
	
_putch:
__putch:
	push 	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	a, (ix+6)
	rst.lil	10h
	ld	hl, 0
	ld	l, a
	ld	sp, ix
	pop	ix
	ret

_mos_puts:
	push	ix
	ld 	ix,0
	add 	ix, sp
	ld 	hl, (ix+6)			; Address of buffer
	ld	bc, (ix+9)			; Size to write from buffer - or 0 if using delimiter
	ld	a, (ix+12) 			; delimiter - only if size is 0
	rst.lil	18h				; Write a block of bytes out to the ESP32
	ld	sp,ix
	pop	ix
	ret

_getch:
	push	ix
	ld	a, mos_getkey			; Read a keypress from the VDP
	rst.lil	08h
	pop	ix
	ret

_waitvblank:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld.lil	a, (ix + sysvar_time + 0)
_waitvblankloop:	
	cp.lil	a, (ix + sysvar_time + 0)
	jr	z, _waitvblankloop
	pop	ix
	ret

;unit32_t getsysvar_time()
_getsysvar_time:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h 				; returns pointer to sysvars in IX
	ld	hl, (ix+sysvar_time)		; get the 3 least significant bytes
	ld 	e, (ix+sysvar_time+3) 		; get the most signiciant byte
	pop	ix
	ret

_getsysvar_vpd_pflags:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_vpd_pflags)
	pop	ix
	ret

_getsysvar_keyascii:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_keyascii)
	pop	ix
	ret

_getsysvar_keymods:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_keymods)
	pop	ix
	ret

_getsysvar_cursorX:
	push	ix
	ld	a, mos_sysvars			; MOS Call for mos_sysvars
	rst.lil	08h				; returns pointer to sysvars in ixu
	ld	a, (ix+sysvar_cursorX)
	pop	ix
	ret

_getsysvar_cursorY:
	push 	ix
	ld	a, mos_sysvars			; MOS Call for mos_sysvars
	rst.lil	08h				; returns pointer to sysvars in ixu
	ld	a, (ix+sysvar_cursorY)
	pop	ix
	ret

_getsysvar_scrchar:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_scrchar)
	pop	ix
	ret

_getsysvar_scrpixel:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	hl, (ix+sysvar_scrpixel)
	pop	ix
	ret

_getsysvar_audioChannel:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_audioChannel)
	pop	ix
	ret

_getsysvar_audioSuccess:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_audioSuccess)
	pop	ix
	ret

_getsysvar_scrwidth:
	push	ix
	ld	a, mos_sysvars			; MOS Call for mos_sysvars
	rst.lil	08h				; returns pointer to sysvars in ixu
	ld	hl,0
	ld	l, (ix+sysvar_scrWidth)	; get current screenwidth
	ld	h, (ix+sysvar_scrWidth+1)
	pop	ix
	ret

_getsysvar_scrheight:
	push 	ix
	ld	a, mos_sysvars			; MOS Call for mos_sysvars
	rst.lil	08h				; returns pointer to sysvars in ixu
	ld	hl,0
	ld	l, (ix+sysvar_scrHeight)	; get current screenHeight
	ld	h, (ix+sysvar_scrHeight+1)
	pop	ix
	ret

_getsysvar_scrCols:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_scrCols)
	pop	ix
	ret

_getsysvar_scrRows:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_scrRows)
	pop	ix
	ret

_getsysvar_scrColours:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_scrColours)
	pop	ix
	ret

_getsysvar_scrpixelIndex:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_scrpixelIndex)
	pop	ix
	ret

_getsysvar_vkeycode:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_vkeycode)
	pop	ix
	ret

_getsysvar_vkeydown:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_vkeydown)
	pop	ix
	ret

_getsysvar_vkeycount:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_vkeycount)
	pop	ix
	ret

_getsysvar_rtc:					; Returns pointer rather than value
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	lea 	hl, ix+sysvar_rtc
	pop	ix
	ret

_getsysvar_keydelay:
	push	ix
	ld	a, mos_sysvars			; MOS Call for mos_sysvars
	rst.lil	08h				; returns pointer to sysvars in ixu
	ld	hl, 0
	ld	l, (ix+sysvar_keydelay)
	ld	h, (ix+sysvar_keydelay+1)
	pop	ix
	ret

_getsysvar_keyrate:
	push	ix
	ld	a, mos_sysvars			; MOS Call for mos_sysvars
	rst.lil	08h				; returns pointer to sysvars in ixu
	ld	hl, 0
	ld	l, (ix+sysvar_keyrate)
	ld	h, (ix+sysvar_keyrate+1)
	pop	ix
	ret

_getsysvar_keyled:
	push	ix
	ld	a, mos_sysvars
	rst.lil	08h
	ld	a, (ix+sysvar_keyled)
	pop	ix
	ret

_mos_load:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; address of filename (zero terminated)
	ld	de, (ix+9)			; address at which to load
	ld	bc, (ix+12)			; maximum allowed size
	ld a,	mos_load
	rst.lil	08h				; Load a file from SD card
	ld	sp, ix
	pop	ix
	ret

_mos_save:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; address of filename (zero terminated)
	ld	de, (ix+9)			; address to save from
	ld	bc, (ix+12)			; number of bytes to save
	ld a,	mos_save
	rst.lil	08h				; save file to SD card
	ld	sp, ix
	pop	ix
	ret

_mos_cd:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; address of pathname (zero terminated)
	ld a,	mos_cd
	rst.lil	08h				; Change current directory on the SD card
	ld	sp, ix
	pop	ix
	ret

_mos_dir:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; address of pathname (zero terminated)
	ld a,	mos_dir
	rst.lil	08h				; List SD card folder contents
	ld	sp, ix
	pop	ix
	ret

_mos_del:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Address of path (zero terminated)
	ld a,	mos_del
	rst.lil	08h				; Delete a file or folder from the SD card
	ld	sp, ix
	pop	ix
	ret

_mos_ren:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Address of filename1 (zero terminated)
	ld	de, (ix+9)			; Address of filename2 (zero terminated)
	ld a,	mos_ren
	rst.lil	08h				; Rename a file on the SD card
	ld	sp, ix
	pop	ix
	ret

_mos_copy:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Address of filename1 (zero terminated)
	ld	de, (ix+9)			; Address of filename2 (zero terminated)
	ld a,	mos_copy
	rst.lil	08h				; Copy a file on the SD card
	ld	sp, ix
	pop	ix
	ret

_mos_mkdir:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Address of path (zero terminated)
	ld a,	mos_mkdir
	rst.lil	08h				; Make a folder on the SD card
	ld	sp, ix
	pop	ix
	ret

_mos_sysvars:
	push	ix
	ld a,	mos_sysvars
	rst.lil	08h				; Fetch a pointer to the system variables
	lea 	hl, ix+0
	pop	ix
	ret

_mos_editline:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Address of the buffer
	ld	bc, (ix+9)			; Buffer length
	ld      e,  (ix+12) 			; 0 to not clear buffer, 1 to clear
	ld a,	mos_editline
	rst.lil	08h				; Invoke the line editor
	ld	sp, ix
	pop	ix
	ret

_mos_fopen:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix+6)			; address to 0-terminated filename in memory
	ld	c,  (ix+9)			; mode : fa_read / fa_write etc
	ld	a, mos_fopen
	rst.lil	08h				; returns filehandle in A
	ld	sp, ix
	pop	ix
	ret	

_mos_fclose:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	c, (ix+6)			; filehandle, or 0 to close all files
	ld	a, mos_fclose
	rst.lil	08h				; returns number of files still open in A
	ld	sp, ix
	pop	ix
	ret	

_mos_fgetc:					; Note: does not return carry flag, which set for EOF
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	c, (ix+6)			; filehandle
	ld	a, mos_fgetc
	rst.lil	08h				; returns character in A (mos_fgetc returns zero on error)
	ld	sp, ix
	pop	ix
	ret	

_mos_fputc:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	c, (ix+6)			; filehandle
	ld	b, (ix+9)			; character to write
	ld	a, mos_fputc
	rst.lil	08h				; returns nothing
	ld	sp, ix
	pop	ix
	ret	

_mos_feof:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	c, (ix+6)			; filehandle
	ld	a, mos_feof
	rst.lil	08h				; returns A: 1 at End-of-File, 0 otherwise
	ld	sp, ix
	pop	ix
	ret	

_ffs_dopen:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix+6)			; pointer to DIR handle
	ld	de, (ix+9)			; pointer to 0-terminated directory path in memory
	ld	a, ffs_dopen
	rst.lil	08h				; returns FRESULT in A
	ld	sp, ix
	pop	ix
	ret

_ffs_dclose:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix+6)			; pointer to DIR handle
	ld	a, ffs_dclose
	rst.lil	08h				; returns FRESULT in A
	ld	sp, ix
	pop	ix
	ret		

_ffs_dread:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	hl, (ix+6)			; pointer to DIR handle
	ld	de, (ix+9)			; pointer to FILINFO handle
	ld	a, ffs_dread
	rst.lil	08h				; returns DIR handle in A
	ld	sp, ix
	pop	ix
	ret		

_mos_getError:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	e, (ix+6)			; The error code
	ld	hl,(ix+7)			; Address of buffer to copy message into
	ld	bc,(ix+10)  			; Size of buffer
	ld	a, mos_getError
	rst.lil	08h				; Copy an error string to a buffer
	ld	sp, ix
	pop	ix
	ret	

_mos_oscli:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Pointer the the MOS command string
	ld	bc, (ix+9)			; Pointer to additional command structure
	ld      de, (ix+12) 			; Number of additional commands
	ld a,	mos_oscli
	rst.lil	08h				; Execute a MOS command
	ld	sp, ix
	pop	ix
	ret

_mos_getrtc:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Pointer to a buffer to copy the string to (at least 32 bytes)
	ld a,	mos_getrtc
	rst.lil	08h				; Get a time string from the RTC (Requires MOS 1.03 or above)
	ld	sp, ix
	pop	ix
	ret

_mos_setrtc:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	hl, (ix+6)			; Pointer to a 6-byte buffer with the time data
	ld a,	mos_setrtc
	rst.lil	08h				; Set the RTC (Requires MOS 1.03 or above)
	ld	sp, ix
	pop	ix
	ret

_mos_setintvector:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	de, (ix+6)			; Interrupt vector number to set
	ld	hl, (ix+9)			; Address of new interrupt vector
	ld a,	mos_setintvector
	rst.lil	08h				; Set an interrupt vector (Requires MOS 1.03 or above)
	ld	sp, ix
	pop	ix
	ret

_mos_uopen:
	push	ix 				; Save ix - will use as stack frame pointer
	ld 	ix, 0
	add 	ix, sp
	push	ix
	ld 	ix, (ix+9)			; 1st calling param - Address of uart1 settings structure
	ld	a, mos_uopen
	rst.lil 08h
	pop	ix
	ld	sp, ix
	pop	ix
	ret

_mos_uclose:
	push	ix
	ld	a, mos_uclose
	rst.lil	08h
	pop	ix
	ret

_mos_ugetc:
	push	ix
	ld	hl, 0
	ld	a, mos_ugetc			; Read a byte from UART1
	rst.lil	08h
	ld	l, a
	jr	nc, _mos_ugetc_exit
	ld	h, 01h				; error, return >255 in hl	
_mos_ugetc_exit:
	pop		ix
	ret

_mos_uputc:
	push	ix
	ld	c, a
	ld	a, mos_uputc
	rst.lil	08h
	ld	a, 1h
	jr	nc, _mos_uputc_exit
	xor	a, a				; error condition, return 0
_mos_uputc_exit:
	pop	ix
	ret

_mos_fread:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	bc, (ix+6)			; file handle
	ld	hl, (ix+9)			; buffer address
	ld	de, (ix+12)			; number of bytes to read
	ld a,	mos_fread
	rst.lil	08h
	ex	de, hl				; number of bytes read
	ld	sp, ix
	pop	ix
	ret

_mos_fwrite:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	bc, (ix+6)			; file handle
	ld	hl, (ix+9)			; buffer address
	ld	de, (ix+12)			; number of bytes to write
	ld a,	mos_fwrite
	rst.lil	08h
	ex	de, hl				; number of bytes written
	ld	sp, ix
	pop	ix
	ret

_mos_flseek:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	bc, (ix+6)			; file handle
	ld	de, 0
	ld	hl, (ix+9) 			; 24 least significant bits
	ld	e, (ix+12)			; 8 most most significant bits
	ld a,	mos_flseek
	rst.lil	08h
	ld	sp, ix
	pop	ix
	ret

_mos_getfil:
	push	ix
	ld 	ix, 0
	add 	ix, sp
	ld 	bc, (ix+6)			; File identifier
	ld a,	mos_getfil
	rst.lil	08h				; Get a pointer to the relevant FIL struct
	ld	sp, ix
	pop	ix
	ret

_mos_setkbvector:
	push	ix
	ld 		ix,0
	add 	ix, sp
	ld	hl, (ix+6)
	ld	c,	(ix+9)
	ld a,	mos_setkbvector
	rst.lil	08h
	ld		sp,ix
	pop		ix
	ret

_mos_getkbmap:
	push	ix
	ld a,	mos_getkbmap
	rst.lil	08h
	push	ix
	pop		hl
	pop		ix
	ret

_mos_i2c_open:
	push	ix
	ld 		ix,0
	add 	ix, sp
	ld	c, (ix+6)
	ld a,	mos_i2c_open
	rst.lil	08h
	ld		sp,ix
	pop		ix
	ret

_mos_i2c_close:
	push	ix
	ld 		ix,0
	add 	ix, sp
	ld a,	mos_i2c_close
	rst.lil	08h
	ld		sp,ix
	pop		ix
	ret
_mos_i2c_write:
	push	ix
	ld 		ix,0
	add 	ix, sp
	ld		c, (ix+6)
	ld		b, (ix+9)
	ld		hl, (ix+12)
	ld a,	mos_i2c_write
	rst.lil	08h
	ld		sp,ix
	pop		ix
	ret

_mos_i2c_read:
	push	ix
	ld 		ix,0
	add 	ix, sp
	ld		c, (ix+6)
	ld		b, (ix+9)
	ld		hl, (ix+12)
	ld a,	mos_i2c_read
	rst.lil	08h
	ld		sp,ix
	pop		ix
	ret
